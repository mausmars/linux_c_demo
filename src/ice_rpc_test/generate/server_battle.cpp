//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `server_battle.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "server_battle.h"
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::squarepro::battle::CreateBattleRequest> iceC_squarepro_battle_CreateBattleRequest_init("::squarepro::battle::CreateBattleRequest");

const ::std::string iceC_squarepro_battle_IBattleService_ids[2] =
{
    "::Ice::Object",
    "::squarepro::battle::IBattleService"
};
const ::std::string iceC_squarepro_battle_IBattleService_ops[] =
{
    "createBattle",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_squarepro_battle_IBattleService_createBattle_name = "createBattle";

const ::IceInternal::DefaultValueFactoryInit<::squarepro::battle::BattleResultEvent> iceC_squarepro_battle_BattleResultEvent_init("::squarepro::battle::BattleResultEvent");

}

bool
squarepro::battle::IBattleService::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_squarepro_battle_IBattleService_ids, iceC_squarepro_battle_IBattleService_ids + 2, s);
}

::std::vector<::std::string>
squarepro::battle::IBattleService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_squarepro_battle_IBattleService_ids[0], &iceC_squarepro_battle_IBattleService_ids[2]);
}

::std::string
squarepro::battle::IBattleService::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
squarepro::battle::IBattleService::ice_staticId()
{
    static const ::std::string typeId = "::squarepro::battle::IBattleService";
    return typeId;
}

/// \cond INTERNAL
bool
squarepro::battle::IBattleService::_iceD_createBattle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<CreateBattleRequest> iceP_request;
    istr->readAll(iceP_request);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->createBattleAsync(::std::move(iceP_request), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
squarepro::battle::IBattleService::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_squarepro_battle_IBattleService_ops, iceC_squarepro_battle_IBattleService_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_squarepro_battle_IBattleService_ops)
    {
        case 0:
        {
            return _iceD_createBattle(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

squarepro::battle::CreateBattleRequest::~CreateBattleRequest()
{
}

const ::std::string&
squarepro::battle::CreateBattleRequest::ice_staticId()
{
    static const ::std::string typeId = "::squarepro::battle::CreateBattleRequest";
    return typeId;
}

squarepro::battle::BattleResultEvent::~BattleResultEvent()
{
}

const ::std::string&
squarepro::battle::BattleResultEvent::ice_staticId()
{
    static const ::std::string typeId = "::squarepro::battle::BattleResultEvent";
    return typeId;
}

/// \cond INTERNAL
void
squarepro::battle::IBattleServicePrx::_iceI_createBattle(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<CreateBattleRequest>& iceP_request, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_squarepro_battle_IBattleService_createBattle_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_request);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
squarepro::battle::IBattleServicePrx::_newInstance() const
{
    return ::IceInternal::createProxy<IBattleServicePrx>();
}
/// \endcond

const ::std::string&
squarepro::battle::IBattleServicePrx::ice_staticId()
{
    return IBattleService::ice_staticId();
}

#else // C++98 mapping

namespace
{

namespace
{

const ::std::string iceC_squarepro_battle_IBattleService_createBattle_name = "createBattle";

}

}

squarepro::battle::AMD_IBattleService_createBattle::~AMD_IBattleService_createBattle()
{
}

/// \cond INTERNAL
IceAsync::squarepro::battle::AMD_IBattleService_createBattle::AMD_IBattleService_createBattle(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::squarepro::battle::AMD_IBattleService_createBattle::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::squarepro::battle::upCast(CreateBattleRequest* p) { return p; }

void
::IceProxy::squarepro::battle::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< CreateBattleRequest>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new CreateBattleRequest;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::squarepro::battle::CreateBattleRequest::_newInstance() const
{
    return new CreateBattleRequest;
}
/// \endcond

const ::std::string&
IceProxy::squarepro::battle::CreateBattleRequest::ice_staticId()
{
    return ::squarepro::battle::CreateBattleRequest::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::squarepro::battle::upCast(IBattleService* p) { return p; }

void
::IceProxy::squarepro::battle::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< IBattleService>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new IBattleService;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::squarepro::battle::IBattleService::_iceI_begin_createBattle(const ::squarepro::battle::CreateBattleRequestPtr& iceP_request, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_squarepro_battle_IBattleService_createBattle_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_squarepro_battle_IBattleService_createBattle_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_request);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_squarepro_battle_IBattleService_createBattle_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::squarepro::battle::IBattleService::end_createBattle(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_squarepro_battle_IBattleService_createBattle_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::squarepro::battle::IBattleService::_newInstance() const
{
    return new IBattleService;
}
/// \endcond

const ::std::string&
IceProxy::squarepro::battle::IBattleService::ice_staticId()
{
    return ::squarepro::battle::IBattleService::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::squarepro::battle::upCast(BattleResultEvent* p) { return p; }

void
::IceProxy::squarepro::battle::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< BattleResultEvent>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new BattleResultEvent;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::squarepro::battle::BattleResultEvent::_newInstance() const
{
    return new BattleResultEvent;
}
/// \endcond

const ::std::string&
IceProxy::squarepro::battle::BattleResultEvent::ice_staticId()
{
    return ::squarepro::battle::BattleResultEvent::ice_staticId();
}

squarepro::battle::CreateBattleRequest::~CreateBattleRequest()
{
}

/// \cond INTERNAL
::Ice::Object* squarepro::battle::upCast(CreateBattleRequest* p) { return p; }

/// \endcond

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
squarepro::battle::CreateBattleRequest::ice_clone() const
{
    ::Ice::Object* p = new CreateBattleRequest(*this);
    return p;
}
#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_squarepro_battle_CreateBattleRequest_ids[2] =
{
    "::Ice::Object",
    "::squarepro::battle::CreateBattleRequest"
};

}

bool
squarepro::battle::CreateBattleRequest::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_squarepro_battle_CreateBattleRequest_ids, iceC_squarepro_battle_CreateBattleRequest_ids + 2, s);
}

::std::vector< ::std::string>
squarepro::battle::CreateBattleRequest::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_squarepro_battle_CreateBattleRequest_ids[0], &iceC_squarepro_battle_CreateBattleRequest_ids[2]);
}

const ::std::string&
squarepro::battle::CreateBattleRequest::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
squarepro::battle::CreateBattleRequest::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::squarepro::battle::CreateBattleRequest";
    return typeId;
#else
    return iceC_squarepro_battle_CreateBattleRequest_ids[1];
#endif
}

void
squarepro::battle::CreateBattleRequest::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    {
        for(::squarepro::model::BattleTeamLList::iterator _i0 = battleTeam.begin(); _i0 != battleTeam.end(); ++_i0)
        {
            if((*_i0))
            {
                if((::squarepro::model::upCast((*_i0).get())->_iceGcVisit(v_)))
                {
                    (*_i0) = 0;
                }
            }
        }
    }
}

/// \cond STREAM
void
squarepro::battle::CreateBattleRequest::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< CreateBattleRequest, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
squarepro::battle::CreateBattleRequest::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< CreateBattleRequest, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::squarepro::battle::CreateBattleRequest> iceC_squarepro_battle_CreateBattleRequest_init("::squarepro::battle::CreateBattleRequest");
}

::Ice::ValueFactoryPtr
squarepro::battle::CreateBattleRequest::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::squarepro::battle::CreateBattleRequest::ice_staticId());
}

/// \cond INTERNAL
void
squarepro::battle::_icePatchObjectPtr(CreateBattleRequestPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CreateBattleRequestPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(CreateBattleRequest::ice_staticId(), v);
    }
}
/// \endcond

squarepro::battle::IBattleService::~IBattleService()
{
}

/// \cond INTERNAL
::Ice::Object* squarepro::battle::upCast(IBattleService* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_squarepro_battle_IBattleService_ids[2] =
{
    "::Ice::Object",
    "::squarepro::battle::IBattleService"
};

}

bool
squarepro::battle::IBattleService::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_squarepro_battle_IBattleService_ids, iceC_squarepro_battle_IBattleService_ids + 2, s);
}

::std::vector< ::std::string>
squarepro::battle::IBattleService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_squarepro_battle_IBattleService_ids[0], &iceC_squarepro_battle_IBattleService_ids[2]);
}

const ::std::string&
squarepro::battle::IBattleService::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
squarepro::battle::IBattleService::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::squarepro::battle::IBattleService";
    return typeId;
#else
    return iceC_squarepro_battle_IBattleService_ids[1];
#endif
}

/// \cond INTERNAL
bool
squarepro::battle::IBattleService::_iceD_createBattle(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    CreateBattleRequestPtr iceP_request;
    istr->read(iceP_request);
    istr->readPendingValues();
    inS.endReadParams();
    this->createBattle_async(new IceAsync::squarepro::battle::AMD_IBattleService_createBattle(inS), iceP_request, current);
    return false;
}
/// \endcond

namespace
{
const ::std::string iceC_squarepro_battle_IBattleService_all[] =
{
    "createBattle",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
squarepro::battle::IBattleService::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_squarepro_battle_IBattleService_all, iceC_squarepro_battle_IBattleService_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_squarepro_battle_IBattleService_all)
    {
        case 0:
        {
            return _iceD_createBattle(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
squarepro::battle::IBattleService::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< IBattleService, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
squarepro::battle::IBattleService::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< IBattleService, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
squarepro::battle::_icePatchObjectPtr(IBattleServicePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = IBattleServicePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(IBattleService::ice_staticId(), v);
    }
}
/// \endcond

squarepro::battle::BattleResultEvent::~BattleResultEvent()
{
}

/// \cond INTERNAL
::Ice::Object* squarepro::battle::upCast(BattleResultEvent* p) { return p; }

/// \endcond

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
squarepro::battle::BattleResultEvent::ice_clone() const
{
    ::Ice::Object* p = new BattleResultEvent(*this);
    return p;
}
#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_squarepro_battle_BattleResultEvent_ids[3] =
{
    "::Ice::Object",
    "::squarepro::battle::BattleResultEvent",
    "::squarepro::event::IEvent"
};

}

bool
squarepro::battle::BattleResultEvent::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_squarepro_battle_BattleResultEvent_ids, iceC_squarepro_battle_BattleResultEvent_ids + 3, s);
}

::std::vector< ::std::string>
squarepro::battle::BattleResultEvent::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_squarepro_battle_BattleResultEvent_ids[0], &iceC_squarepro_battle_BattleResultEvent_ids[3]);
}

const ::std::string&
squarepro::battle::BattleResultEvent::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
squarepro::battle::BattleResultEvent::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::squarepro::battle::BattleResultEvent";
    return typeId;
#else
    return iceC_squarepro_battle_BattleResultEvent_ids[1];
#endif
}

void
squarepro::battle::BattleResultEvent::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(selfStatistics)
    {
        if((::squarepro::model::upCast(selfStatistics.get())->_iceGcVisit(v_)))
        {
            selfStatistics = 0;
        }
    }
    if(enemyStatistics)
    {
        if((::squarepro::model::upCast(enemyStatistics.get())->_iceGcVisit(v_)))
        {
            enemyStatistics = 0;
        }
    }
}

/// \cond STREAM
void
squarepro::battle::BattleResultEvent::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< BattleResultEvent, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    ::squarepro::event::IEvent::_iceWriteImpl(ostr);
}

void
squarepro::battle::BattleResultEvent::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< BattleResultEvent, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    ::squarepro::event::IEvent::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::squarepro::battle::BattleResultEvent> iceC_squarepro_battle_BattleResultEvent_init("::squarepro::battle::BattleResultEvent");
}

::Ice::ValueFactoryPtr
squarepro::battle::BattleResultEvent::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::squarepro::battle::BattleResultEvent::ice_staticId());
}

/// \cond INTERNAL
void
squarepro::battle::_icePatchObjectPtr(BattleResultEventPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = BattleResultEventPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(BattleResultEvent::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
