//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `server_battle.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __server_battle_h__
#define __server_battle_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include "common_event.h"
#include "server_model.h"
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace squarepro
{


namespace battle
{

class CreateBattleRequest;
class IBattleService;
class IBattleServicePrx;
class BattleResultEvent;

}

}

namespace squarepro
{

namespace battle
{

class IBattleService : public virtual ::Ice::Object
{
public:

    using ProxyType = IBattleServicePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void createBattleAsync(::std::shared_ptr<CreateBattleRequest> request, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_createBattle(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

}

namespace squarepro
{

namespace battle
{

class CreateBattleRequest : public ::Ice::ValueHelper<CreateBattleRequest, ::Ice::Value>
{
public:

    virtual ~CreateBattleRequest();

    CreateBattleRequest() = default;

    CreateBattleRequest(const CreateBattleRequest&) = default;
    CreateBattleRequest(CreateBattleRequest&&) = default;
    CreateBattleRequest& operator=(const CreateBattleRequest&) = default;
    CreateBattleRequest& operator=(CreateBattleRequest&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    CreateBattleRequest(int battleType, int battleKeyId, int battleSubType, const ::squarepro::model::BattleTeamLList& battleTeam) :
        battleType(battleType),
        battleKeyId(battleKeyId),
        battleSubType(battleSubType),
        battleTeam(battleTeam)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const int&, const ::squarepro::model::BattleTeamLList&> ice_tuple() const
    {
        return std::tie(battleType, battleKeyId, battleSubType, battleTeam);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    int battleType;
    int battleKeyId;
    int battleSubType;
    ::squarepro::model::BattleTeamLList battleTeam;
};

/// \cond INTERNAL
static CreateBattleRequest _iceS_CreateBattleRequest_init;
/// \endcond

class BattleResultEvent : public ::Ice::ValueHelper<BattleResultEvent, ::squarepro::event::IEvent>
{
public:

    virtual ~BattleResultEvent();

    BattleResultEvent() = default;

    BattleResultEvent(const BattleResultEvent&) = default;
    BattleResultEvent(BattleResultEvent&&) = default;
    BattleResultEvent& operator=(const BattleResultEvent&) = default;
    BattleResultEvent& operator=(BattleResultEvent&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    BattleResultEvent(long long int userId, long long int battleId, int result, int battleSubType, int consumeTime, int firstturn, int matchType, const ::std::shared_ptr<::squarepro::model::UserStatistics>& selfStatistics, const ::std::shared_ptr<::squarepro::model::UserStatistics>& enemyStatistics, int activityType, long long int activityId) :
        userId(userId),
        battleId(battleId),
        result(result),
        battleSubType(battleSubType),
        consumeTime(consumeTime),
        firstturn(firstturn),
        matchType(matchType),
        selfStatistics(selfStatistics),
        enemyStatistics(enemyStatistics),
        activityType(activityType),
        activityId(activityId)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const long long int&, const long long int&, const int&, const int&, const int&, const int&, const int&, const ::std::shared_ptr<::squarepro::model::UserStatistics>&, const ::std::shared_ptr<::squarepro::model::UserStatistics>&, const int&, const long long int&> ice_tuple() const
    {
        return std::tie(userId, battleId, result, battleSubType, consumeTime, firstturn, matchType, selfStatistics, enemyStatistics, activityType, activityId);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    long long int userId;
    long long int battleId;
    int result;
    int battleSubType;
    int consumeTime;
    int firstturn;
    int matchType;
    ::std::shared_ptr<::squarepro::model::UserStatistics> selfStatistics;
    ::std::shared_ptr<::squarepro::model::UserStatistics> enemyStatistics;
    int activityType;
    long long int activityId;
};

}

}

namespace squarepro
{

namespace battle
{

class IBattleServicePrx : public virtual ::Ice::Proxy<IBattleServicePrx, ::Ice::ObjectPrx>
{
public:

    void createBattle(const ::std::shared_ptr<CreateBattleRequest>& request, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IBattleServicePrx::_iceI_createBattle, request, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto createBattleAsync(const ::std::shared_ptr<CreateBattleRequest>& request, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IBattleServicePrx::_iceI_createBattle, request, context);
    }

    ::std::function<void()>
    createBattleAsync(const ::std::shared_ptr<CreateBattleRequest>& request,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &squarepro::battle::IBattleServicePrx::_iceI_createBattle, request, context);
    }

    /// \cond INTERNAL
    void _iceI_createBattle(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<CreateBattleRequest>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    IBattleServicePrx() = default;
    friend ::std::shared_ptr<IBattleServicePrx> IceInternal::createProxy<IBattleServicePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::squarepro::battle::CreateBattleRequest, S>
{
    static void read(S* istr, ::squarepro::battle::CreateBattleRequest& v)
    {
        istr->readAll(v.battleType, v.battleKeyId, v.battleSubType, v.battleTeam);
    }
};

template<typename S>
struct StreamReader<::squarepro::battle::BattleResultEvent, S>
{
    static void read(S* istr, ::squarepro::battle::BattleResultEvent& v)
    {
        istr->readAll(v.userId, v.battleId, v.result, v.battleSubType, v.consumeTime, v.firstturn, v.matchType, v.selfStatistics, v.enemyStatistics, v.activityType, v.activityId);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace squarepro
{

/// \cond INTERNAL
namespace battle
{

using CreateBattleRequestPtr = ::std::shared_ptr<CreateBattleRequest>;

using IBattleServicePtr = ::std::shared_ptr<IBattleService>;
using IBattleServicePrxPtr = ::std::shared_ptr<IBattleServicePrx>;

using BattleResultEventPtr = ::std::shared_ptr<BattleResultEvent>;

}
/// \endcond

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace squarepro
{

namespace battle
{

class CreateBattleRequest;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< CreateBattleRequest>&);
::IceProxy::Ice::Object* upCast(CreateBattleRequest*);
/// \endcond

class IBattleService;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< IBattleService>&);
::IceProxy::Ice::Object* upCast(IBattleService*);
/// \endcond

class BattleResultEvent;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< BattleResultEvent>&);
::IceProxy::Ice::Object* upCast(BattleResultEvent*);
/// \endcond

}

}

}

namespace squarepro
{

namespace battle
{

class CreateBattleRequest;
/// \cond INTERNAL
::Ice::Object* upCast(CreateBattleRequest*);
/// \endcond
typedef ::IceInternal::Handle< CreateBattleRequest> CreateBattleRequestPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::squarepro::battle::CreateBattleRequest> CreateBattleRequestPrx;
typedef CreateBattleRequestPrx CreateBattleRequestPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(CreateBattleRequestPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class IBattleService;
/// \cond INTERNAL
::Ice::Object* upCast(IBattleService*);
/// \endcond
typedef ::IceInternal::Handle< IBattleService> IBattleServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::squarepro::battle::IBattleService> IBattleServicePrx;
typedef IBattleServicePrx IBattleServicePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(IBattleServicePtr&, const ::Ice::ObjectPtr&);
/// \endcond

class BattleResultEvent;
/// \cond INTERNAL
::Ice::Object* upCast(BattleResultEvent*);
/// \endcond
typedef ::IceInternal::Handle< BattleResultEvent> BattleResultEventPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::squarepro::battle::BattleResultEvent> BattleResultEventPrx;
typedef BattleResultEventPrx BattleResultEventPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(BattleResultEventPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

}

namespace squarepro
{

namespace battle
{

/**
 * AMD callback class for squarepro::battle::IBattleService::createBattle_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_IBattleService_createBattle : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_IBattleService_createBattle();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::squarepro::battle::AMD_IBattleService_createBattle> AMD_IBattleService_createBattlePtr;

}

}

/// \cond INTERNAL
namespace IceAsync
{

namespace squarepro
{

namespace battle
{

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_IBattleService_createBattle : public ::squarepro::battle::AMD_IBattleService_createBattle, public ::IceInternal::IncomingAsync
{
public:

    AMD_IBattleService_createBattle(::IceInternal::Incoming&);

    virtual void ice_response();
};

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(pop)
#endif

}

}

}
/// \endcond

namespace squarepro
{

namespace battle
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::squarepro::battle::IBattleService::begin_createBattle.
 * Create a wrapper instance by calling ::squarepro::battle::newCallback_IBattleService_createBattle.
 */
class Callback_IBattleService_createBattle_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IBattleService_createBattle_Base> Callback_IBattleService_createBattlePtr;

}

}

namespace IceProxy
{

namespace squarepro
{

namespace battle
{

class CreateBattleRequest : public virtual ::Ice::Proxy<CreateBattleRequest, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class IBattleService : public virtual ::Ice::Proxy<IBattleService, ::IceProxy::Ice::Object>
{
public:

    void createBattle(const ::squarepro::battle::CreateBattleRequestPtr& request, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_createBattle(_iceI_begin_createBattle(request, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_createBattle(const ::squarepro::battle::CreateBattleRequestPtr& request, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_createBattle(request, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createBattle(const ::squarepro::battle::CreateBattleRequestPtr& request, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createBattle(request, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createBattle(const ::squarepro::battle::CreateBattleRequestPtr& request, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createBattle(request, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createBattle(const ::squarepro::battle::CreateBattleRequestPtr& request, const ::squarepro::battle::Callback_IBattleService_createBattlePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createBattle(request, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createBattle(const ::squarepro::battle::CreateBattleRequestPtr& request, const ::Ice::Context& context, const ::squarepro::battle::Callback_IBattleService_createBattlePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createBattle(request, context, cb, cookie);
    }

    void end_createBattle(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_createBattle(const ::squarepro::battle::CreateBattleRequestPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class BattleResultEvent : public virtual ::Ice::Proxy<BattleResultEvent, ::IceProxy::squarepro::event::IEvent>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

}

namespace squarepro
{

namespace battle
{

class CreateBattleRequest : public virtual ::Ice::Object, public ::IceInternal::GCObject
{
public:

    typedef CreateBattleRequestPrx ProxyType;
    typedef CreateBattleRequestPtr PointerType;

    virtual ~CreateBattleRequest();

    CreateBattleRequest()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    CreateBattleRequest(::Ice::Int battleType, ::Ice::Int battleKeyId, ::Ice::Int battleSubType, const ::squarepro::model::BattleTeamLList& battleTeam) :
        battleType(battleType),
        battleKeyId(battleKeyId),
        battleSubType(battleSubType),
        battleTeam(battleTeam)
    {
    }

#ifdef ICE_CPP11_COMPILER
    CreateBattleRequest(const CreateBattleRequest&) = default;
    CreateBattleRequest& operator=(const CreateBattleRequest&) = default;
#endif

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
    /// \cond INTERNAL
    virtual void _iceGcVisitMembers(::IceInternal::GCVisitor&);
    /// \endcond

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Ice::Int battleType;
    ::Ice::Int battleKeyId;
    ::Ice::Int battleSubType;
    ::squarepro::model::BattleTeamLList battleTeam;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_CreateBattleRequest_init = ::squarepro::battle::CreateBattleRequest::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const CreateBattleRequest& lhs, const CreateBattleRequest& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const CreateBattleRequest& lhs, const CreateBattleRequest& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class IBattleService : public virtual ::Ice::Object
{
public:

    typedef IBattleServicePrx ProxyType;
    typedef IBattleServicePtr PointerType;

    virtual ~IBattleService();

#ifdef ICE_CPP11_COMPILER
    IBattleService() = default;
    IBattleService(const IBattleService&) = default;
    IBattleService& operator=(const IBattleService&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void createBattle_async(const ::squarepro::battle::AMD_IBattleService_createBattlePtr& cb, const CreateBattleRequestPtr& request, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_createBattle(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const IBattleService& lhs, const IBattleService& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const IBattleService& lhs, const IBattleService& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class BattleResultEvent : public ::squarepro::event::IEvent, public ::IceInternal::GCObject
{
public:

    typedef BattleResultEventPrx ProxyType;
    typedef BattleResultEventPtr PointerType;

    virtual ~BattleResultEvent();

    BattleResultEvent()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    BattleResultEvent(::Ice::Long userId, ::Ice::Long battleId, ::Ice::Int result, ::Ice::Int battleSubType, ::Ice::Int consumeTime, ::Ice::Int firstturn, ::Ice::Int matchType, const ::squarepro::model::UserStatisticsPtr& selfStatistics, const ::squarepro::model::UserStatisticsPtr& enemyStatistics, ::Ice::Int activityType, ::Ice::Long activityId) :
        userId(userId),
        battleId(battleId),
        result(result),
        battleSubType(battleSubType),
        consumeTime(consumeTime),
        firstturn(firstturn),
        matchType(matchType),
        selfStatistics(selfStatistics),
        enemyStatistics(enemyStatistics),
        activityType(activityType),
        activityId(activityId)
    {
    }

#ifdef ICE_CPP11_COMPILER
    BattleResultEvent(const BattleResultEvent&) = default;
    BattleResultEvent& operator=(const BattleResultEvent&) = default;
#endif

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
    /// \cond INTERNAL
    virtual void _iceGcVisitMembers(::IceInternal::GCVisitor&);
    /// \endcond

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Ice::Long userId;
    ::Ice::Long battleId;
    ::Ice::Int result;
    ::Ice::Int battleSubType;
    ::Ice::Int consumeTime;
    ::Ice::Int firstturn;
    ::Ice::Int matchType;
    ::squarepro::model::UserStatisticsPtr selfStatistics;
    ::squarepro::model::UserStatisticsPtr enemyStatistics;
    ::Ice::Int activityType;
    ::Ice::Long activityId;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_BattleResultEvent_init = ::squarepro::battle::BattleResultEvent::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const BattleResultEvent& lhs, const BattleResultEvent& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const BattleResultEvent& lhs, const BattleResultEvent& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::squarepro::battle::CreateBattleRequest, S>
{
    static void write(S* ostr, const ::squarepro::battle::CreateBattleRequest& v)
    {
        ostr->write(v.battleType);
        ostr->write(v.battleKeyId);
        ostr->write(v.battleSubType);
        ostr->write(v.battleTeam);
    }
};

template<typename S>
struct StreamReader< ::squarepro::battle::CreateBattleRequest, S>
{
    static void read(S* istr, ::squarepro::battle::CreateBattleRequest& v)
    {
        istr->read(v.battleType);
        istr->read(v.battleKeyId);
        istr->read(v.battleSubType);
        istr->read(v.battleTeam);
    }
};

template<typename S>
struct StreamWriter< ::squarepro::battle::BattleResultEvent, S>
{
    static void write(S* ostr, const ::squarepro::battle::BattleResultEvent& v)
    {
        ostr->write(v.userId);
        ostr->write(v.battleId);
        ostr->write(v.result);
        ostr->write(v.battleSubType);
        ostr->write(v.consumeTime);
        ostr->write(v.firstturn);
        ostr->write(v.matchType);
        ostr->write(v.selfStatistics);
        ostr->write(v.enemyStatistics);
        ostr->write(v.activityType);
        ostr->write(v.activityId);
    }
};

template<typename S>
struct StreamReader< ::squarepro::battle::BattleResultEvent, S>
{
    static void read(S* istr, ::squarepro::battle::BattleResultEvent& v)
    {
        istr->read(v.userId);
        istr->read(v.battleId);
        istr->read(v.result);
        istr->read(v.battleSubType);
        istr->read(v.consumeTime);
        istr->read(v.firstturn);
        istr->read(v.matchType);
        istr->read(v.selfStatistics);
        istr->read(v.enemyStatistics);
        istr->read(v.activityType);
        istr->read(v.activityId);
    }
};

}
/// \endcond

namespace squarepro
{

namespace battle
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::squarepro::battle::IBattleService::begin_createBattle.
 * Create a wrapper instance by calling ::squarepro::battle::newCallback_IBattleService_createBattle.
 */
template<class T>
class CallbackNC_IBattleService_createBattle : public Callback_IBattleService_createBattle_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IBattleService_createBattle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::battle::IBattleService::begin_createBattle.
 */
template<class T> Callback_IBattleService_createBattlePtr
newCallback_IBattleService_createBattle(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IBattleService_createBattle<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::battle::IBattleService::begin_createBattle.
 */
template<class T> Callback_IBattleService_createBattlePtr
newCallback_IBattleService_createBattle(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IBattleService_createBattle<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::battle::IBattleService::begin_createBattle.
 */
template<class T> Callback_IBattleService_createBattlePtr
newCallback_IBattleService_createBattle(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IBattleService_createBattle<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::battle::IBattleService::begin_createBattle.
 */
template<class T> Callback_IBattleService_createBattlePtr
newCallback_IBattleService_createBattle(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IBattleService_createBattle<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::squarepro::battle::IBattleService::begin_createBattle.
 * Create a wrapper instance by calling ::squarepro::battle::newCallback_IBattleService_createBattle.
 */
template<class T, typename CT>
class Callback_IBattleService_createBattle : public Callback_IBattleService_createBattle_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IBattleService_createBattle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::battle::IBattleService::begin_createBattle.
 */
template<class T, typename CT> Callback_IBattleService_createBattlePtr
newCallback_IBattleService_createBattle(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IBattleService_createBattle<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::battle::IBattleService::begin_createBattle.
 */
template<class T, typename CT> Callback_IBattleService_createBattlePtr
newCallback_IBattleService_createBattle(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IBattleService_createBattle<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::battle::IBattleService::begin_createBattle.
 */
template<class T, typename CT> Callback_IBattleService_createBattlePtr
newCallback_IBattleService_createBattle(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IBattleService_createBattle<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::battle::IBattleService::begin_createBattle.
 */
template<class T, typename CT> Callback_IBattleService_createBattlePtr
newCallback_IBattleService_createBattle(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IBattleService_createBattle<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
