//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `server_room.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "server_room.h"
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::squarepro::room::MatchupRequest> iceC_squarepro_room_MatchupRequest_init("::squarepro::room::MatchupRequest");

const ::std::string iceC_squarepro_room_IRoomService_ids[2] =
{
    "::Ice::Object",
    "::squarepro::room::IRoomService"
};
const ::std::string iceC_squarepro_room_IRoomService_ops[] =
{
    "cancelMatchup",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "matchup"
};
const ::std::string iceC_squarepro_room_IRoomService_matchup_name = "matchup";
const ::std::string iceC_squarepro_room_IRoomService_cancelMatchup_name = "cancelMatchup";

const ::IceInternal::DefaultValueFactoryInit<::squarepro::room::MatchRoomSucceedEvent> iceC_squarepro_room_MatchRoomSucceedEvent_init("::squarepro::room::MatchRoomSucceedEvent");

}

bool
squarepro::room::IRoomService::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_squarepro_room_IRoomService_ids, iceC_squarepro_room_IRoomService_ids + 2, s);
}

::std::vector<::std::string>
squarepro::room::IRoomService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_squarepro_room_IRoomService_ids[0], &iceC_squarepro_room_IRoomService_ids[2]);
}

::std::string
squarepro::room::IRoomService::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
squarepro::room::IRoomService::ice_staticId()
{
    static const ::std::string typeId = "::squarepro::room::IRoomService";
    return typeId;
}

/// \cond INTERNAL
bool
squarepro::room::IRoomService::_iceD_matchup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<MatchupRequest> iceP_request;
    istr->readAll(iceP_request);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->matchupAsync(::std::move(iceP_request), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
squarepro::room::IRoomService::_iceD_cancelMatchup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    long long int iceP_userId;
    istr->readAll(iceP_userId);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->cancelMatchupAsync(iceP_userId, inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
squarepro::room::IRoomService::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_squarepro_room_IRoomService_ops, iceC_squarepro_room_IRoomService_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_squarepro_room_IRoomService_ops)
    {
        case 0:
        {
            return _iceD_cancelMatchup(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_matchup(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

squarepro::room::MatchupRequest::~MatchupRequest()
{
}

const ::std::string&
squarepro::room::MatchupRequest::ice_staticId()
{
    static const ::std::string typeId = "::squarepro::room::MatchupRequest";
    return typeId;
}

squarepro::room::MatchRoomSucceedEvent::~MatchRoomSucceedEvent()
{
}

const ::std::string&
squarepro::room::MatchRoomSucceedEvent::ice_staticId()
{
    static const ::std::string typeId = "::squarepro::room::MatchRoomSucceedEvent";
    return typeId;
}

/// \cond INTERNAL
void
squarepro::room::IRoomServicePrx::_iceI_matchup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<MatchupRequest>& iceP_request, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_squarepro_room_IRoomService_matchup_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_request);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
squarepro::room::IRoomServicePrx::_iceI_cancelMatchup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, long long int iceP_userId, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_squarepro_room_IRoomService_cancelMatchup_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_userId);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
squarepro::room::IRoomServicePrx::_newInstance() const
{
    return ::IceInternal::createProxy<IRoomServicePrx>();
}
/// \endcond

const ::std::string&
squarepro::room::IRoomServicePrx::ice_staticId()
{
    return IRoomService::ice_staticId();
}

#else // C++98 mapping

namespace
{

namespace
{

const ::std::string iceC_squarepro_room_IRoomService_matchup_name = "matchup";

const ::std::string iceC_squarepro_room_IRoomService_cancelMatchup_name = "cancelMatchup";

}

}

squarepro::room::AMD_IRoomService_matchup::~AMD_IRoomService_matchup()
{
}

squarepro::room::AMD_IRoomService_cancelMatchup::~AMD_IRoomService_cancelMatchup()
{
}

/// \cond INTERNAL
IceAsync::squarepro::room::AMD_IRoomService_matchup::AMD_IRoomService_matchup(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::squarepro::room::AMD_IRoomService_matchup::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::squarepro::room::AMD_IRoomService_cancelMatchup::AMD_IRoomService_cancelMatchup(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::squarepro::room::AMD_IRoomService_cancelMatchup::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::squarepro::room::upCast(MatchupRequest* p) { return p; }

void
::IceProxy::squarepro::room::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< MatchupRequest>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new MatchupRequest;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::squarepro::room::MatchupRequest::_newInstance() const
{
    return new MatchupRequest;
}
/// \endcond

const ::std::string&
IceProxy::squarepro::room::MatchupRequest::ice_staticId()
{
    return ::squarepro::room::MatchupRequest::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::squarepro::room::upCast(IRoomService* p) { return p; }

void
::IceProxy::squarepro::room::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< IRoomService>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new IRoomService;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::squarepro::room::IRoomService::_iceI_begin_matchup(const ::squarepro::room::MatchupRequestPtr& iceP_request, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_squarepro_room_IRoomService_matchup_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_squarepro_room_IRoomService_matchup_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_request);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_squarepro_room_IRoomService_matchup_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::squarepro::room::IRoomService::end_matchup(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_squarepro_room_IRoomService_matchup_name);
}

::Ice::AsyncResultPtr
IceProxy::squarepro::room::IRoomService::_iceI_begin_cancelMatchup(::Ice::Long iceP_userId, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_squarepro_room_IRoomService_cancelMatchup_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_squarepro_room_IRoomService_cancelMatchup_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_userId);
        result->endWriteParams();
        result->invoke(iceC_squarepro_room_IRoomService_cancelMatchup_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::squarepro::room::IRoomService::end_cancelMatchup(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_squarepro_room_IRoomService_cancelMatchup_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::squarepro::room::IRoomService::_newInstance() const
{
    return new IRoomService;
}
/// \endcond

const ::std::string&
IceProxy::squarepro::room::IRoomService::ice_staticId()
{
    return ::squarepro::room::IRoomService::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::squarepro::room::upCast(MatchRoomSucceedEvent* p) { return p; }

void
::IceProxy::squarepro::room::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< MatchRoomSucceedEvent>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new MatchRoomSucceedEvent;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::squarepro::room::MatchRoomSucceedEvent::_newInstance() const
{
    return new MatchRoomSucceedEvent;
}
/// \endcond

const ::std::string&
IceProxy::squarepro::room::MatchRoomSucceedEvent::ice_staticId()
{
    return ::squarepro::room::MatchRoomSucceedEvent::ice_staticId();
}

squarepro::room::MatchupRequest::~MatchupRequest()
{
}

/// \cond INTERNAL
::Ice::Object* squarepro::room::upCast(MatchupRequest* p) { return p; }

/// \endcond

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
squarepro::room::MatchupRequest::ice_clone() const
{
    ::Ice::Object* p = new MatchupRequest(*this);
    return p;
}
#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_squarepro_room_MatchupRequest_ids[2] =
{
    "::Ice::Object",
    "::squarepro::room::MatchupRequest"
};

}

bool
squarepro::room::MatchupRequest::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_squarepro_room_MatchupRequest_ids, iceC_squarepro_room_MatchupRequest_ids + 2, s);
}

::std::vector< ::std::string>
squarepro::room::MatchupRequest::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_squarepro_room_MatchupRequest_ids[0], &iceC_squarepro_room_MatchupRequest_ids[2]);
}

const ::std::string&
squarepro::room::MatchupRequest::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
squarepro::room::MatchupRequest::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::squarepro::room::MatchupRequest";
    return typeId;
#else
    return iceC_squarepro_room_MatchupRequest_ids[1];
#endif
}

void
squarepro::room::MatchupRequest::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(userTroop)
    {
        if((::squarepro::model::upCast(userTroop.get())->_iceGcVisit(v_)))
        {
            userTroop = 0;
        }
    }
}

/// \cond STREAM
void
squarepro::room::MatchupRequest::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< MatchupRequest, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
squarepro::room::MatchupRequest::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< MatchupRequest, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::squarepro::room::MatchupRequest> iceC_squarepro_room_MatchupRequest_init("::squarepro::room::MatchupRequest");
}

::Ice::ValueFactoryPtr
squarepro::room::MatchupRequest::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::squarepro::room::MatchupRequest::ice_staticId());
}

/// \cond INTERNAL
void
squarepro::room::_icePatchObjectPtr(MatchupRequestPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = MatchupRequestPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(MatchupRequest::ice_staticId(), v);
    }
}
/// \endcond

squarepro::room::IRoomService::~IRoomService()
{
}

/// \cond INTERNAL
::Ice::Object* squarepro::room::upCast(IRoomService* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_squarepro_room_IRoomService_ids[2] =
{
    "::Ice::Object",
    "::squarepro::room::IRoomService"
};

}

bool
squarepro::room::IRoomService::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_squarepro_room_IRoomService_ids, iceC_squarepro_room_IRoomService_ids + 2, s);
}

::std::vector< ::std::string>
squarepro::room::IRoomService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_squarepro_room_IRoomService_ids[0], &iceC_squarepro_room_IRoomService_ids[2]);
}

const ::std::string&
squarepro::room::IRoomService::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
squarepro::room::IRoomService::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::squarepro::room::IRoomService";
    return typeId;
#else
    return iceC_squarepro_room_IRoomService_ids[1];
#endif
}

/// \cond INTERNAL
bool
squarepro::room::IRoomService::_iceD_matchup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    MatchupRequestPtr iceP_request;
    istr->read(iceP_request);
    istr->readPendingValues();
    inS.endReadParams();
    this->matchup_async(new IceAsync::squarepro::room::AMD_IRoomService_matchup(inS), iceP_request, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
squarepro::room::IRoomService::_iceD_cancelMatchup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Long iceP_userId;
    istr->read(iceP_userId);
    inS.endReadParams();
    this->cancelMatchup_async(new IceAsync::squarepro::room::AMD_IRoomService_cancelMatchup(inS), iceP_userId, current);
    return false;
}
/// \endcond

namespace
{
const ::std::string iceC_squarepro_room_IRoomService_all[] =
{
    "cancelMatchup",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "matchup"
};

}

/// \cond INTERNAL
bool
squarepro::room::IRoomService::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_squarepro_room_IRoomService_all, iceC_squarepro_room_IRoomService_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_squarepro_room_IRoomService_all)
    {
        case 0:
        {
            return _iceD_cancelMatchup(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_matchup(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
squarepro::room::IRoomService::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< IRoomService, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
squarepro::room::IRoomService::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< IRoomService, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
squarepro::room::_icePatchObjectPtr(IRoomServicePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = IRoomServicePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(IRoomService::ice_staticId(), v);
    }
}
/// \endcond

squarepro::room::MatchRoomSucceedEvent::~MatchRoomSucceedEvent()
{
}

/// \cond INTERNAL
::Ice::Object* squarepro::room::upCast(MatchRoomSucceedEvent* p) { return p; }

/// \endcond

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
squarepro::room::MatchRoomSucceedEvent::ice_clone() const
{
    ::Ice::Object* p = new MatchRoomSucceedEvent(*this);
    return p;
}
#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string iceC_squarepro_room_MatchRoomSucceedEvent_ids[3] =
{
    "::Ice::Object",
    "::squarepro::event::IEvent",
    "::squarepro::room::MatchRoomSucceedEvent"
};

}

bool
squarepro::room::MatchRoomSucceedEvent::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_squarepro_room_MatchRoomSucceedEvent_ids, iceC_squarepro_room_MatchRoomSucceedEvent_ids + 3, s);
}

::std::vector< ::std::string>
squarepro::room::MatchRoomSucceedEvent::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_squarepro_room_MatchRoomSucceedEvent_ids[0], &iceC_squarepro_room_MatchRoomSucceedEvent_ids[3]);
}

const ::std::string&
squarepro::room::MatchRoomSucceedEvent::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
squarepro::room::MatchRoomSucceedEvent::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::squarepro::room::MatchRoomSucceedEvent";
    return typeId;
#else
    return iceC_squarepro_room_MatchRoomSucceedEvent_ids[2];
#endif
}

void
squarepro::room::MatchRoomSucceedEvent::_iceGcVisitMembers(::IceInternal::GCVisitor& v_)
{
    if(selfStatistics)
    {
        if((::squarepro::model::upCast(selfStatistics.get())->_iceGcVisit(v_)))
        {
            selfStatistics = 0;
        }
    }
    if(enemyStatistics)
    {
        if((::squarepro::model::upCast(enemyStatistics.get())->_iceGcVisit(v_)))
        {
            enemyStatistics = 0;
        }
    }
}

/// \cond STREAM
void
squarepro::room::MatchRoomSucceedEvent::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, false);
    ::Ice::StreamWriter< MatchRoomSucceedEvent, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
    ::squarepro::event::IEvent::_iceWriteImpl(ostr);
}

void
squarepro::room::MatchRoomSucceedEvent::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< MatchRoomSucceedEvent, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
    ::squarepro::event::IEvent::_iceReadImpl(istr);
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::squarepro::room::MatchRoomSucceedEvent> iceC_squarepro_room_MatchRoomSucceedEvent_init("::squarepro::room::MatchRoomSucceedEvent");
}

::Ice::ValueFactoryPtr
squarepro::room::MatchRoomSucceedEvent::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::squarepro::room::MatchRoomSucceedEvent::ice_staticId());
}

/// \cond INTERNAL
void
squarepro::room::_icePatchObjectPtr(MatchRoomSucceedEventPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = MatchRoomSucceedEventPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(MatchRoomSucceedEvent::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
