//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `common_basetype.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "common_basetype.h"
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::squarepro::basetype::ByteWrap> iceC_squarepro_basetype_ByteWrap_init("::squarepro::basetype::ByteWrap");

const ::IceInternal::DefaultValueFactoryInit<::squarepro::basetype::ShortWrap> iceC_squarepro_basetype_ShortWrap_init("::squarepro::basetype::ShortWrap");

const ::IceInternal::DefaultValueFactoryInit<::squarepro::basetype::IntWrap> iceC_squarepro_basetype_IntWrap_init("::squarepro::basetype::IntWrap");

const ::IceInternal::DefaultValueFactoryInit<::squarepro::basetype::LongWrap> iceC_squarepro_basetype_LongWrap_init("::squarepro::basetype::LongWrap");

const ::IceInternal::DefaultValueFactoryInit<::squarepro::basetype::FloatWrap> iceC_squarepro_basetype_FloatWrap_init("::squarepro::basetype::FloatWrap");

const ::IceInternal::DefaultValueFactoryInit<::squarepro::basetype::DoubleWrap> iceC_squarepro_basetype_DoubleWrap_init("::squarepro::basetype::DoubleWrap");

const ::IceInternal::DefaultValueFactoryInit<::squarepro::basetype::StringWrap> iceC_squarepro_basetype_StringWrap_init("::squarepro::basetype::StringWrap");

}

squarepro::basetype::ByteWrap::~ByteWrap()
{
}

const ::std::string&
squarepro::basetype::ByteWrap::ice_staticId()
{
    static const ::std::string typeId = "::squarepro::basetype::ByteWrap";
    return typeId;
}

squarepro::basetype::ShortWrap::~ShortWrap()
{
}

const ::std::string&
squarepro::basetype::ShortWrap::ice_staticId()
{
    static const ::std::string typeId = "::squarepro::basetype::ShortWrap";
    return typeId;
}

squarepro::basetype::IntWrap::~IntWrap()
{
}

const ::std::string&
squarepro::basetype::IntWrap::ice_staticId()
{
    static const ::std::string typeId = "::squarepro::basetype::IntWrap";
    return typeId;
}

squarepro::basetype::LongWrap::~LongWrap()
{
}

const ::std::string&
squarepro::basetype::LongWrap::ice_staticId()
{
    static const ::std::string typeId = "::squarepro::basetype::LongWrap";
    return typeId;
}

squarepro::basetype::FloatWrap::~FloatWrap()
{
}

const ::std::string&
squarepro::basetype::FloatWrap::ice_staticId()
{
    static const ::std::string typeId = "::squarepro::basetype::FloatWrap";
    return typeId;
}

squarepro::basetype::DoubleWrap::~DoubleWrap()
{
}

const ::std::string&
squarepro::basetype::DoubleWrap::ice_staticId()
{
    static const ::std::string typeId = "::squarepro::basetype::DoubleWrap";
    return typeId;
}

squarepro::basetype::StringWrap::~StringWrap()
{
}

const ::std::string&
squarepro::basetype::StringWrap::ice_staticId()
{
    static const ::std::string typeId = "::squarepro::basetype::StringWrap";
    return typeId;
}

#else // C++98 mapping

namespace
{

namespace
{

}

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::squarepro::basetype::upCast(ByteWrap* p) { return p; }

void
::IceProxy::squarepro::basetype::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ByteWrap>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ByteWrap;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::squarepro::basetype::ByteWrap::_newInstance() const
{
    return new ByteWrap;
}
/// \endcond

const ::std::string&
IceProxy::squarepro::basetype::ByteWrap::ice_staticId()
{
    return ::squarepro::basetype::ByteWrap::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::squarepro::basetype::upCast(ShortWrap* p) { return p; }

void
::IceProxy::squarepro::basetype::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ShortWrap>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ShortWrap;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::squarepro::basetype::ShortWrap::_newInstance() const
{
    return new ShortWrap;
}
/// \endcond

const ::std::string&
IceProxy::squarepro::basetype::ShortWrap::ice_staticId()
{
    return ::squarepro::basetype::ShortWrap::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::squarepro::basetype::upCast(IntWrap* p) { return p; }

void
::IceProxy::squarepro::basetype::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< IntWrap>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new IntWrap;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::squarepro::basetype::IntWrap::_newInstance() const
{
    return new IntWrap;
}
/// \endcond

const ::std::string&
IceProxy::squarepro::basetype::IntWrap::ice_staticId()
{
    return ::squarepro::basetype::IntWrap::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::squarepro::basetype::upCast(LongWrap* p) { return p; }

void
::IceProxy::squarepro::basetype::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< LongWrap>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new LongWrap;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::squarepro::basetype::LongWrap::_newInstance() const
{
    return new LongWrap;
}
/// \endcond

const ::std::string&
IceProxy::squarepro::basetype::LongWrap::ice_staticId()
{
    return ::squarepro::basetype::LongWrap::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::squarepro::basetype::upCast(FloatWrap* p) { return p; }

void
::IceProxy::squarepro::basetype::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< FloatWrap>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new FloatWrap;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::squarepro::basetype::FloatWrap::_newInstance() const
{
    return new FloatWrap;
}
/// \endcond

const ::std::string&
IceProxy::squarepro::basetype::FloatWrap::ice_staticId()
{
    return ::squarepro::basetype::FloatWrap::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::squarepro::basetype::upCast(DoubleWrap* p) { return p; }

void
::IceProxy::squarepro::basetype::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< DoubleWrap>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new DoubleWrap;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::squarepro::basetype::DoubleWrap::_newInstance() const
{
    return new DoubleWrap;
}
/// \endcond

const ::std::string&
IceProxy::squarepro::basetype::DoubleWrap::ice_staticId()
{
    return ::squarepro::basetype::DoubleWrap::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::squarepro::basetype::upCast(StringWrap* p) { return p; }

void
::IceProxy::squarepro::basetype::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< StringWrap>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new StringWrap;
        v->_copyFrom(proxy);
    }
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::squarepro::basetype::StringWrap::_newInstance() const
{
    return new StringWrap;
}
/// \endcond

const ::std::string&
IceProxy::squarepro::basetype::StringWrap::ice_staticId()
{
    return ::squarepro::basetype::StringWrap::ice_staticId();
}

squarepro::basetype::ByteWrap::~ByteWrap()
{
}

/// \cond INTERNAL
::Ice::Object* squarepro::basetype::upCast(ByteWrap* p) { return p; }

/// \endcond
::Ice::ObjectPtr
squarepro::basetype::ByteWrap::ice_clone() const
{
    ::Ice::Object* p = new ByteWrap(*this);
    return p;
}

namespace
{
const ::std::string iceC_squarepro_basetype_ByteWrap_ids[2] =
{
    "::Ice::Object",
    "::squarepro::basetype::ByteWrap"
};

}

bool
squarepro::basetype::ByteWrap::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_squarepro_basetype_ByteWrap_ids, iceC_squarepro_basetype_ByteWrap_ids + 2, s);
}

::std::vector< ::std::string>
squarepro::basetype::ByteWrap::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_squarepro_basetype_ByteWrap_ids[0], &iceC_squarepro_basetype_ByteWrap_ids[2]);
}

const ::std::string&
squarepro::basetype::ByteWrap::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
squarepro::basetype::ByteWrap::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::squarepro::basetype::ByteWrap";
    return typeId;
#else
    return iceC_squarepro_basetype_ByteWrap_ids[1];
#endif
}

/// \cond STREAM
void
squarepro::basetype::ByteWrap::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< ByteWrap, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
squarepro::basetype::ByteWrap::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ByteWrap, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::squarepro::basetype::ByteWrap> iceC_squarepro_basetype_ByteWrap_init("::squarepro::basetype::ByteWrap");
}

::Ice::ValueFactoryPtr
squarepro::basetype::ByteWrap::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::squarepro::basetype::ByteWrap::ice_staticId());
}

/// \cond INTERNAL
void
squarepro::basetype::_icePatchObjectPtr(ByteWrapPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ByteWrapPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(ByteWrap::ice_staticId(), v);
    }
}
/// \endcond

squarepro::basetype::ShortWrap::~ShortWrap()
{
}

/// \cond INTERNAL
::Ice::Object* squarepro::basetype::upCast(ShortWrap* p) { return p; }

/// \endcond
::Ice::ObjectPtr
squarepro::basetype::ShortWrap::ice_clone() const
{
    ::Ice::Object* p = new ShortWrap(*this);
    return p;
}

namespace
{
const ::std::string iceC_squarepro_basetype_ShortWrap_ids[2] =
{
    "::Ice::Object",
    "::squarepro::basetype::ShortWrap"
};

}

bool
squarepro::basetype::ShortWrap::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_squarepro_basetype_ShortWrap_ids, iceC_squarepro_basetype_ShortWrap_ids + 2, s);
}

::std::vector< ::std::string>
squarepro::basetype::ShortWrap::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_squarepro_basetype_ShortWrap_ids[0], &iceC_squarepro_basetype_ShortWrap_ids[2]);
}

const ::std::string&
squarepro::basetype::ShortWrap::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
squarepro::basetype::ShortWrap::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::squarepro::basetype::ShortWrap";
    return typeId;
#else
    return iceC_squarepro_basetype_ShortWrap_ids[1];
#endif
}

/// \cond STREAM
void
squarepro::basetype::ShortWrap::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< ShortWrap, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
squarepro::basetype::ShortWrap::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ShortWrap, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::squarepro::basetype::ShortWrap> iceC_squarepro_basetype_ShortWrap_init("::squarepro::basetype::ShortWrap");
}

::Ice::ValueFactoryPtr
squarepro::basetype::ShortWrap::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::squarepro::basetype::ShortWrap::ice_staticId());
}

/// \cond INTERNAL
void
squarepro::basetype::_icePatchObjectPtr(ShortWrapPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ShortWrapPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(ShortWrap::ice_staticId(), v);
    }
}
/// \endcond

squarepro::basetype::IntWrap::~IntWrap()
{
}

/// \cond INTERNAL
::Ice::Object* squarepro::basetype::upCast(IntWrap* p) { return p; }

/// \endcond
::Ice::ObjectPtr
squarepro::basetype::IntWrap::ice_clone() const
{
    ::Ice::Object* p = new IntWrap(*this);
    return p;
}

namespace
{
const ::std::string iceC_squarepro_basetype_IntWrap_ids[2] =
{
    "::Ice::Object",
    "::squarepro::basetype::IntWrap"
};

}

bool
squarepro::basetype::IntWrap::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_squarepro_basetype_IntWrap_ids, iceC_squarepro_basetype_IntWrap_ids + 2, s);
}

::std::vector< ::std::string>
squarepro::basetype::IntWrap::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_squarepro_basetype_IntWrap_ids[0], &iceC_squarepro_basetype_IntWrap_ids[2]);
}

const ::std::string&
squarepro::basetype::IntWrap::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
squarepro::basetype::IntWrap::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::squarepro::basetype::IntWrap";
    return typeId;
#else
    return iceC_squarepro_basetype_IntWrap_ids[1];
#endif
}

/// \cond STREAM
void
squarepro::basetype::IntWrap::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< IntWrap, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
squarepro::basetype::IntWrap::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< IntWrap, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::squarepro::basetype::IntWrap> iceC_squarepro_basetype_IntWrap_init("::squarepro::basetype::IntWrap");
}

::Ice::ValueFactoryPtr
squarepro::basetype::IntWrap::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::squarepro::basetype::IntWrap::ice_staticId());
}

/// \cond INTERNAL
void
squarepro::basetype::_icePatchObjectPtr(IntWrapPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = IntWrapPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(IntWrap::ice_staticId(), v);
    }
}
/// \endcond

squarepro::basetype::LongWrap::~LongWrap()
{
}

/// \cond INTERNAL
::Ice::Object* squarepro::basetype::upCast(LongWrap* p) { return p; }

/// \endcond
::Ice::ObjectPtr
squarepro::basetype::LongWrap::ice_clone() const
{
    ::Ice::Object* p = new LongWrap(*this);
    return p;
}

namespace
{
const ::std::string iceC_squarepro_basetype_LongWrap_ids[2] =
{
    "::Ice::Object",
    "::squarepro::basetype::LongWrap"
};

}

bool
squarepro::basetype::LongWrap::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_squarepro_basetype_LongWrap_ids, iceC_squarepro_basetype_LongWrap_ids + 2, s);
}

::std::vector< ::std::string>
squarepro::basetype::LongWrap::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_squarepro_basetype_LongWrap_ids[0], &iceC_squarepro_basetype_LongWrap_ids[2]);
}

const ::std::string&
squarepro::basetype::LongWrap::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
squarepro::basetype::LongWrap::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::squarepro::basetype::LongWrap";
    return typeId;
#else
    return iceC_squarepro_basetype_LongWrap_ids[1];
#endif
}

/// \cond STREAM
void
squarepro::basetype::LongWrap::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< LongWrap, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
squarepro::basetype::LongWrap::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< LongWrap, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::squarepro::basetype::LongWrap> iceC_squarepro_basetype_LongWrap_init("::squarepro::basetype::LongWrap");
}

::Ice::ValueFactoryPtr
squarepro::basetype::LongWrap::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::squarepro::basetype::LongWrap::ice_staticId());
}

/// \cond INTERNAL
void
squarepro::basetype::_icePatchObjectPtr(LongWrapPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = LongWrapPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(LongWrap::ice_staticId(), v);
    }
}
/// \endcond

squarepro::basetype::FloatWrap::~FloatWrap()
{
}

/// \cond INTERNAL
::Ice::Object* squarepro::basetype::upCast(FloatWrap* p) { return p; }

/// \endcond
::Ice::ObjectPtr
squarepro::basetype::FloatWrap::ice_clone() const
{
    ::Ice::Object* p = new FloatWrap(*this);
    return p;
}

namespace
{
const ::std::string iceC_squarepro_basetype_FloatWrap_ids[2] =
{
    "::Ice::Object",
    "::squarepro::basetype::FloatWrap"
};

}

bool
squarepro::basetype::FloatWrap::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_squarepro_basetype_FloatWrap_ids, iceC_squarepro_basetype_FloatWrap_ids + 2, s);
}

::std::vector< ::std::string>
squarepro::basetype::FloatWrap::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_squarepro_basetype_FloatWrap_ids[0], &iceC_squarepro_basetype_FloatWrap_ids[2]);
}

const ::std::string&
squarepro::basetype::FloatWrap::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
squarepro::basetype::FloatWrap::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::squarepro::basetype::FloatWrap";
    return typeId;
#else
    return iceC_squarepro_basetype_FloatWrap_ids[1];
#endif
}

/// \cond STREAM
void
squarepro::basetype::FloatWrap::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< FloatWrap, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
squarepro::basetype::FloatWrap::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< FloatWrap, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::squarepro::basetype::FloatWrap> iceC_squarepro_basetype_FloatWrap_init("::squarepro::basetype::FloatWrap");
}

::Ice::ValueFactoryPtr
squarepro::basetype::FloatWrap::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::squarepro::basetype::FloatWrap::ice_staticId());
}

/// \cond INTERNAL
void
squarepro::basetype::_icePatchObjectPtr(FloatWrapPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = FloatWrapPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(FloatWrap::ice_staticId(), v);
    }
}
/// \endcond

squarepro::basetype::DoubleWrap::~DoubleWrap()
{
}

/// \cond INTERNAL
::Ice::Object* squarepro::basetype::upCast(DoubleWrap* p) { return p; }

/// \endcond
::Ice::ObjectPtr
squarepro::basetype::DoubleWrap::ice_clone() const
{
    ::Ice::Object* p = new DoubleWrap(*this);
    return p;
}

namespace
{
const ::std::string iceC_squarepro_basetype_DoubleWrap_ids[2] =
{
    "::Ice::Object",
    "::squarepro::basetype::DoubleWrap"
};

}

bool
squarepro::basetype::DoubleWrap::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_squarepro_basetype_DoubleWrap_ids, iceC_squarepro_basetype_DoubleWrap_ids + 2, s);
}

::std::vector< ::std::string>
squarepro::basetype::DoubleWrap::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_squarepro_basetype_DoubleWrap_ids[0], &iceC_squarepro_basetype_DoubleWrap_ids[2]);
}

const ::std::string&
squarepro::basetype::DoubleWrap::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
squarepro::basetype::DoubleWrap::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::squarepro::basetype::DoubleWrap";
    return typeId;
#else
    return iceC_squarepro_basetype_DoubleWrap_ids[1];
#endif
}

/// \cond STREAM
void
squarepro::basetype::DoubleWrap::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< DoubleWrap, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
squarepro::basetype::DoubleWrap::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< DoubleWrap, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::squarepro::basetype::DoubleWrap> iceC_squarepro_basetype_DoubleWrap_init("::squarepro::basetype::DoubleWrap");
}

::Ice::ValueFactoryPtr
squarepro::basetype::DoubleWrap::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::squarepro::basetype::DoubleWrap::ice_staticId());
}

/// \cond INTERNAL
void
squarepro::basetype::_icePatchObjectPtr(DoubleWrapPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = DoubleWrapPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(DoubleWrap::ice_staticId(), v);
    }
}
/// \endcond

squarepro::basetype::StringWrap::~StringWrap()
{
}

/// \cond INTERNAL
::Ice::Object* squarepro::basetype::upCast(StringWrap* p) { return p; }

/// \endcond
::Ice::ObjectPtr
squarepro::basetype::StringWrap::ice_clone() const
{
    ::Ice::Object* p = new StringWrap(*this);
    return p;
}

namespace
{
const ::std::string iceC_squarepro_basetype_StringWrap_ids[2] =
{
    "::Ice::Object",
    "::squarepro::basetype::StringWrap"
};

}

bool
squarepro::basetype::StringWrap::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_squarepro_basetype_StringWrap_ids, iceC_squarepro_basetype_StringWrap_ids + 2, s);
}

::std::vector< ::std::string>
squarepro::basetype::StringWrap::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_squarepro_basetype_StringWrap_ids[0], &iceC_squarepro_basetype_StringWrap_ids[2]);
}

const ::std::string&
squarepro::basetype::StringWrap::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
squarepro::basetype::StringWrap::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::squarepro::basetype::StringWrap";
    return typeId;
#else
    return iceC_squarepro_basetype_StringWrap_ids[1];
#endif
}

/// \cond STREAM
void
squarepro::basetype::StringWrap::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< StringWrap, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
squarepro::basetype::StringWrap::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< StringWrap, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{
const ::IceInternal::DefaultValueFactoryInit< ::squarepro::basetype::StringWrap> iceC_squarepro_basetype_StringWrap_init("::squarepro::basetype::StringWrap");
}

::Ice::ValueFactoryPtr
squarepro::basetype::StringWrap::ice_factory()
{
    return ::IceInternal::factoryTable->getValueFactory(::squarepro::basetype::StringWrap::ice_staticId());
}

/// \cond INTERNAL
void
squarepro::basetype::_icePatchObjectPtr(StringWrapPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = StringWrapPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(StringWrap::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
