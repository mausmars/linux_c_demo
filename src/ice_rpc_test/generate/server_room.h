//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `server_room.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __server_room_h__
#define __server_room_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include "common_basetype.h"
#include "common_event.h"
#include "server_model.h"
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace squarepro
{


namespace room
{

class MatchupRequest;
class IRoomService;
class IRoomServicePrx;
class MatchRoomSucceedEvent;

}

}

namespace squarepro
{

namespace room
{

class IRoomService : public virtual ::Ice::Object
{
public:

    using ProxyType = IRoomServicePrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void matchupAsync(::std::shared_ptr<MatchupRequest> request, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_matchup(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void cancelMatchupAsync(long long int userId, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_cancelMatchup(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

}

namespace squarepro
{

namespace room
{

class MatchupRequest : public ::Ice::ValueHelper<MatchupRequest, ::Ice::Value>
{
public:

    virtual ~MatchupRequest();

    MatchupRequest() = default;

    MatchupRequest(const MatchupRequest&) = default;
    MatchupRequest(MatchupRequest&&) = default;
    MatchupRequest& operator=(const MatchupRequest&) = default;
    MatchupRequest& operator=(MatchupRequest&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit MatchupRequest(const ::std::shared_ptr<::squarepro::model::UserTroop>& userTroop) :
        userTroop(userTroop)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::shared_ptr<::squarepro::model::UserTroop>&> ice_tuple() const
    {
        return std::tie(userTroop);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::shared_ptr<::squarepro::model::UserTroop> userTroop;
};

/// \cond INTERNAL
static MatchupRequest _iceS_MatchupRequest_init;
/// \endcond

class MatchRoomSucceedEvent : public ::Ice::ValueHelper<MatchRoomSucceedEvent, ::squarepro::event::IEvent>
{
public:

    virtual ~MatchRoomSucceedEvent();

    MatchRoomSucceedEvent() = default;

    MatchRoomSucceedEvent(const MatchRoomSucceedEvent&) = default;
    MatchRoomSucceedEvent(MatchRoomSucceedEvent&&) = default;
    MatchRoomSucceedEvent& operator=(const MatchRoomSucceedEvent&) = default;
    MatchRoomSucceedEvent& operator=(MatchRoomSucceedEvent&&) = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    MatchRoomSucceedEvent(long long int userId, long long int battleId, const ::std::string& host, int port, const ::std::string& nodeId, const ::std::string& battleUserToken, int battleSubType, int matchType, const ::std::shared_ptr<::squarepro::model::UserStatistics>& selfStatistics, const ::std::shared_ptr<::squarepro::model::UserStatistics>& enemyStatistics, int activityType, long long int activityId) :
        userId(userId),
        battleId(battleId),
        host(host),
        port(port),
        nodeId(nodeId),
        battleUserToken(battleUserToken),
        battleSubType(battleSubType),
        matchType(matchType),
        selfStatistics(selfStatistics),
        enemyStatistics(enemyStatistics),
        activityType(activityType),
        activityId(activityId)
    {
    }

    /**
     * Obtains a tuple containing all of the value's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const long long int&, const long long int&, const ::std::string&, const int&, const ::std::string&, const ::std::string&, const int&, const int&, const ::std::shared_ptr<::squarepro::model::UserStatistics>&, const ::std::shared_ptr<::squarepro::model::UserStatistics>&, const int&, const long long int&> ice_tuple() const
    {
        return std::tie(userId, battleId, host, port, nodeId, battleUserToken, battleSubType, matchType, selfStatistics, enemyStatistics, activityType, activityId);
    }

    /**
     * Obtains the Slice type ID of this value.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    long long int userId;
    long long int battleId;
    ::std::string host;
    int port;
    ::std::string nodeId;
    ::std::string battleUserToken;
    int battleSubType;
    int matchType;
    ::std::shared_ptr<::squarepro::model::UserStatistics> selfStatistics;
    ::std::shared_ptr<::squarepro::model::UserStatistics> enemyStatistics;
    int activityType;
    long long int activityId;
};

}

}

namespace squarepro
{

namespace room
{

class IRoomServicePrx : public virtual ::Ice::Proxy<IRoomServicePrx, ::Ice::ObjectPrx>
{
public:

    void matchup(const ::std::shared_ptr<MatchupRequest>& request, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IRoomServicePrx::_iceI_matchup, request, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto matchupAsync(const ::std::shared_ptr<MatchupRequest>& request, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IRoomServicePrx::_iceI_matchup, request, context);
    }

    ::std::function<void()>
    matchupAsync(const ::std::shared_ptr<MatchupRequest>& request,
                 ::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &squarepro::room::IRoomServicePrx::_iceI_matchup, request, context);
    }

    /// \cond INTERNAL
    void _iceI_matchup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<MatchupRequest>&, const ::Ice::Context&);
    /// \endcond

    void cancelMatchup(long long int userId, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IRoomServicePrx::_iceI_cancelMatchup, userId, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto cancelMatchupAsync(long long int userId, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IRoomServicePrx::_iceI_cancelMatchup, userId, context);
    }

    ::std::function<void()>
    cancelMatchupAsync(long long int userId,
                       ::std::function<void()> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &squarepro::room::IRoomServicePrx::_iceI_cancelMatchup, userId, context);
    }

    /// \cond INTERNAL
    void _iceI_cancelMatchup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, long long int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    IRoomServicePrx() = default;
    friend ::std::shared_ptr<IRoomServicePrx> IceInternal::createProxy<IRoomServicePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::squarepro::room::MatchupRequest, S>
{
    static void read(S* istr, ::squarepro::room::MatchupRequest& v)
    {
        istr->readAll(v.userTroop);
    }
};

template<typename S>
struct StreamReader<::squarepro::room::MatchRoomSucceedEvent, S>
{
    static void read(S* istr, ::squarepro::room::MatchRoomSucceedEvent& v)
    {
        istr->readAll(v.userId, v.battleId, v.host, v.port, v.nodeId, v.battleUserToken, v.battleSubType, v.matchType, v.selfStatistics, v.enemyStatistics, v.activityType, v.activityId);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace squarepro
{

/// \cond INTERNAL
namespace room
{

using MatchupRequestPtr = ::std::shared_ptr<MatchupRequest>;

using IRoomServicePtr = ::std::shared_ptr<IRoomService>;
using IRoomServicePrxPtr = ::std::shared_ptr<IRoomServicePrx>;

using MatchRoomSucceedEventPtr = ::std::shared_ptr<MatchRoomSucceedEvent>;

}
/// \endcond

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace squarepro
{

namespace room
{

class MatchupRequest;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< MatchupRequest>&);
::IceProxy::Ice::Object* upCast(MatchupRequest*);
/// \endcond

class IRoomService;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< IRoomService>&);
::IceProxy::Ice::Object* upCast(IRoomService*);
/// \endcond

class MatchRoomSucceedEvent;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< MatchRoomSucceedEvent>&);
::IceProxy::Ice::Object* upCast(MatchRoomSucceedEvent*);
/// \endcond

}

}

}

namespace squarepro
{

namespace room
{

class MatchupRequest;
/// \cond INTERNAL
::Ice::Object* upCast(MatchupRequest*);
/// \endcond
typedef ::IceInternal::Handle< MatchupRequest> MatchupRequestPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::squarepro::room::MatchupRequest> MatchupRequestPrx;
typedef MatchupRequestPrx MatchupRequestPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(MatchupRequestPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class IRoomService;
/// \cond INTERNAL
::Ice::Object* upCast(IRoomService*);
/// \endcond
typedef ::IceInternal::Handle< IRoomService> IRoomServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::squarepro::room::IRoomService> IRoomServicePrx;
typedef IRoomServicePrx IRoomServicePrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(IRoomServicePtr&, const ::Ice::ObjectPtr&);
/// \endcond

class MatchRoomSucceedEvent;
/// \cond INTERNAL
::Ice::Object* upCast(MatchRoomSucceedEvent*);
/// \endcond
typedef ::IceInternal::Handle< MatchRoomSucceedEvent> MatchRoomSucceedEventPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::squarepro::room::MatchRoomSucceedEvent> MatchRoomSucceedEventPrx;
typedef MatchRoomSucceedEventPrx MatchRoomSucceedEventPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(MatchRoomSucceedEventPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

}

namespace squarepro
{

namespace room
{

/**
 * AMD callback class for squarepro::room::IRoomService::matchup_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_IRoomService_matchup : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_IRoomService_matchup();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::squarepro::room::AMD_IRoomService_matchup> AMD_IRoomService_matchupPtr;

/**
 * AMD callback class for squarepro::room::IRoomService::cancelMatchup_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_IRoomService_cancelMatchup : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_IRoomService_cancelMatchup();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::squarepro::room::AMD_IRoomService_cancelMatchup> AMD_IRoomService_cancelMatchupPtr;

}

}

/// \cond INTERNAL
namespace IceAsync
{

namespace squarepro
{

namespace room
{

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_IRoomService_matchup : public ::squarepro::room::AMD_IRoomService_matchup, public ::IceInternal::IncomingAsync
{
public:

    AMD_IRoomService_matchup(::IceInternal::Incoming&);

    virtual void ice_response();
};

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(pop)
#endif

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(push)
#   pragma warning(disable:4239)
#endif

class AMD_IRoomService_cancelMatchup : public ::squarepro::room::AMD_IRoomService_cancelMatchup, public ::IceInternal::IncomingAsync
{
public:

    AMD_IRoomService_cancelMatchup(::IceInternal::Incoming&);

    virtual void ice_response();
};

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(pop)
#endif

}

}

}
/// \endcond

namespace squarepro
{

namespace room
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::squarepro::room::IRoomService::begin_matchup.
 * Create a wrapper instance by calling ::squarepro::room::newCallback_IRoomService_matchup.
 */
class Callback_IRoomService_matchup_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRoomService_matchup_Base> Callback_IRoomService_matchupPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::squarepro::room::IRoomService::begin_cancelMatchup.
 * Create a wrapper instance by calling ::squarepro::room::newCallback_IRoomService_cancelMatchup.
 */
class Callback_IRoomService_cancelMatchup_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IRoomService_cancelMatchup_Base> Callback_IRoomService_cancelMatchupPtr;

}

}

namespace IceProxy
{

namespace squarepro
{

namespace room
{

class MatchupRequest : public virtual ::Ice::Proxy<MatchupRequest, ::IceProxy::Ice::Object>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class IRoomService : public virtual ::Ice::Proxy<IRoomService, ::IceProxy::Ice::Object>
{
public:

    void matchup(const ::squarepro::room::MatchupRequestPtr& request, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_matchup(_iceI_begin_matchup(request, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_matchup(const ::squarepro::room::MatchupRequestPtr& request, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_matchup(request, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_matchup(const ::squarepro::room::MatchupRequestPtr& request, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_matchup(request, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_matchup(const ::squarepro::room::MatchupRequestPtr& request, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_matchup(request, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_matchup(const ::squarepro::room::MatchupRequestPtr& request, const ::squarepro::room::Callback_IRoomService_matchupPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_matchup(request, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_matchup(const ::squarepro::room::MatchupRequestPtr& request, const ::Ice::Context& context, const ::squarepro::room::Callback_IRoomService_matchupPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_matchup(request, context, cb, cookie);
    }

    void end_matchup(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_matchup(const ::squarepro::room::MatchupRequestPtr&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void cancelMatchup(::Ice::Long userId, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_cancelMatchup(_iceI_begin_cancelMatchup(userId, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_cancelMatchup(::Ice::Long userId, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_cancelMatchup(userId, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancelMatchup(::Ice::Long userId, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_cancelMatchup(userId, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelMatchup(::Ice::Long userId, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_cancelMatchup(userId, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelMatchup(::Ice::Long userId, const ::squarepro::room::Callback_IRoomService_cancelMatchupPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_cancelMatchup(userId, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_cancelMatchup(::Ice::Long userId, const ::Ice::Context& context, const ::squarepro::room::Callback_IRoomService_cancelMatchupPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_cancelMatchup(userId, context, cb, cookie);
    }

    void end_cancelMatchup(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_cancelMatchup(::Ice::Long, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class MatchRoomSucceedEvent : public virtual ::Ice::Proxy<MatchRoomSucceedEvent, ::IceProxy::squarepro::event::IEvent>
{
public:

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

}

namespace squarepro
{

namespace room
{

class MatchupRequest : public virtual ::Ice::Object, public ::IceInternal::GCObject
{
public:

    typedef MatchupRequestPrx ProxyType;
    typedef MatchupRequestPtr PointerType;

    virtual ~MatchupRequest();

    MatchupRequest()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    explicit MatchupRequest(const ::squarepro::model::UserTroopPtr& userTroop) :
        userTroop(userTroop)
    {
    }

#ifdef ICE_CPP11_COMPILER
    MatchupRequest(const MatchupRequest&) = default;
    MatchupRequest& operator=(const MatchupRequest&) = default;
#endif

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
    /// \cond INTERNAL
    virtual void _iceGcVisitMembers(::IceInternal::GCVisitor&);
    /// \endcond

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::squarepro::model::UserTroopPtr userTroop;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_MatchupRequest_init = ::squarepro::room::MatchupRequest::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const MatchupRequest& lhs, const MatchupRequest& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const MatchupRequest& lhs, const MatchupRequest& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class IRoomService : public virtual ::Ice::Object
{
public:

    typedef IRoomServicePrx ProxyType;
    typedef IRoomServicePtr PointerType;

    virtual ~IRoomService();

#ifdef ICE_CPP11_COMPILER
    IRoomService() = default;
    IRoomService(const IRoomService&) = default;
    IRoomService& operator=(const IRoomService&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void matchup_async(const ::squarepro::room::AMD_IRoomService_matchupPtr& cb, const MatchupRequestPtr& request, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_matchup(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void cancelMatchup_async(const ::squarepro::room::AMD_IRoomService_cancelMatchupPtr& cb, ::Ice::Long userId, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_cancelMatchup(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const IRoomService& lhs, const IRoomService& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const IRoomService& lhs, const IRoomService& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class MatchRoomSucceedEvent : public ::squarepro::event::IEvent, public ::IceInternal::GCObject
{
public:

    typedef MatchRoomSucceedEventPrx ProxyType;
    typedef MatchRoomSucceedEventPtr PointerType;

    virtual ~MatchRoomSucceedEvent();

    MatchRoomSucceedEvent()
    {
    }

    /**
     * One-shot constructor to initialize all data members.
     */
    MatchRoomSucceedEvent(::Ice::Long userId, ::Ice::Long battleId, const ::std::string& host, ::Ice::Int port, const ::std::string& nodeId, const ::std::string& battleUserToken, ::Ice::Int battleSubType, ::Ice::Int matchType, const ::squarepro::model::UserStatisticsPtr& selfStatistics, const ::squarepro::model::UserStatisticsPtr& enemyStatistics, ::Ice::Int activityType, ::Ice::Long activityId) :
        userId(userId),
        battleId(battleId),
        host(host),
        port(port),
        nodeId(nodeId),
        battleUserToken(battleUserToken),
        battleSubType(battleSubType),
        matchType(matchType),
        selfStatistics(selfStatistics),
        enemyStatistics(enemyStatistics),
        activityType(activityType),
        activityId(activityId)
    {
    }

#ifdef ICE_CPP11_COMPILER
    MatchRoomSucceedEvent(const MatchRoomSucceedEvent&) = default;
    MatchRoomSucceedEvent& operator=(const MatchRoomSucceedEvent&) = default;
#endif

    /**
     * Polymorphically clones this object.
     * @return A shallow copy of this object.
     */
    virtual ::Ice::ObjectPtr ice_clone() const;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
    /// \cond INTERNAL
    virtual void _iceGcVisitMembers(::IceInternal::GCVisitor&);
    /// \endcond

    /**
     * Obtains a value factory that instantiates this class.
     * @return The value factory.
     */
    static ::Ice::ValueFactoryPtr ice_factory();

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond

public:

    ::Ice::Long userId;
    ::Ice::Long battleId;
    ::std::string host;
    ::Ice::Int port;
    ::std::string nodeId;
    ::std::string battleUserToken;
    ::Ice::Int battleSubType;
    ::Ice::Int matchType;
    ::squarepro::model::UserStatisticsPtr selfStatistics;
    ::squarepro::model::UserStatisticsPtr enemyStatistics;
    ::Ice::Int activityType;
    ::Ice::Long activityId;
};
/// \cond INTERNAL
static ::Ice::ValueFactoryPtr _iceS_MatchRoomSucceedEvent_init = ::squarepro::room::MatchRoomSucceedEvent::ice_factory();
/// \endcond

/// \cond INTERNAL
inline bool operator==(const MatchRoomSucceedEvent& lhs, const MatchRoomSucceedEvent& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const MatchRoomSucceedEvent& lhs, const MatchRoomSucceedEvent& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamWriter< ::squarepro::room::MatchupRequest, S>
{
    static void write(S* ostr, const ::squarepro::room::MatchupRequest& v)
    {
        ostr->write(v.userTroop);
    }
};

template<typename S>
struct StreamReader< ::squarepro::room::MatchupRequest, S>
{
    static void read(S* istr, ::squarepro::room::MatchupRequest& v)
    {
        istr->read(v.userTroop);
    }
};

template<typename S>
struct StreamWriter< ::squarepro::room::MatchRoomSucceedEvent, S>
{
    static void write(S* ostr, const ::squarepro::room::MatchRoomSucceedEvent& v)
    {
        ostr->write(v.userId);
        ostr->write(v.battleId);
        ostr->write(v.host);
        ostr->write(v.port);
        ostr->write(v.nodeId);
        ostr->write(v.battleUserToken);
        ostr->write(v.battleSubType);
        ostr->write(v.matchType);
        ostr->write(v.selfStatistics);
        ostr->write(v.enemyStatistics);
        ostr->write(v.activityType);
        ostr->write(v.activityId);
    }
};

template<typename S>
struct StreamReader< ::squarepro::room::MatchRoomSucceedEvent, S>
{
    static void read(S* istr, ::squarepro::room::MatchRoomSucceedEvent& v)
    {
        istr->read(v.userId);
        istr->read(v.battleId);
        istr->read(v.host);
        istr->read(v.port);
        istr->read(v.nodeId);
        istr->read(v.battleUserToken);
        istr->read(v.battleSubType);
        istr->read(v.matchType);
        istr->read(v.selfStatistics);
        istr->read(v.enemyStatistics);
        istr->read(v.activityType);
        istr->read(v.activityId);
    }
};

}
/// \endcond

namespace squarepro
{

namespace room
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::squarepro::room::IRoomService::begin_matchup.
 * Create a wrapper instance by calling ::squarepro::room::newCallback_IRoomService_matchup.
 */
template<class T>
class CallbackNC_IRoomService_matchup : public Callback_IRoomService_matchup_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IRoomService_matchup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_matchup.
 */
template<class T> Callback_IRoomService_matchupPtr
newCallback_IRoomService_matchup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRoomService_matchup<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_matchup.
 */
template<class T> Callback_IRoomService_matchupPtr
newCallback_IRoomService_matchup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRoomService_matchup<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_matchup.
 */
template<class T> Callback_IRoomService_matchupPtr
newCallback_IRoomService_matchup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRoomService_matchup<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_matchup.
 */
template<class T> Callback_IRoomService_matchupPtr
newCallback_IRoomService_matchup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRoomService_matchup<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::squarepro::room::IRoomService::begin_matchup.
 * Create a wrapper instance by calling ::squarepro::room::newCallback_IRoomService_matchup.
 */
template<class T, typename CT>
class Callback_IRoomService_matchup : public Callback_IRoomService_matchup_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IRoomService_matchup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_matchup.
 */
template<class T, typename CT> Callback_IRoomService_matchupPtr
newCallback_IRoomService_matchup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRoomService_matchup<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_matchup.
 */
template<class T, typename CT> Callback_IRoomService_matchupPtr
newCallback_IRoomService_matchup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRoomService_matchup<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_matchup.
 */
template<class T, typename CT> Callback_IRoomService_matchupPtr
newCallback_IRoomService_matchup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRoomService_matchup<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_matchup.
 */
template<class T, typename CT> Callback_IRoomService_matchupPtr
newCallback_IRoomService_matchup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRoomService_matchup<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::squarepro::room::IRoomService::begin_cancelMatchup.
 * Create a wrapper instance by calling ::squarepro::room::newCallback_IRoomService_cancelMatchup.
 */
template<class T>
class CallbackNC_IRoomService_cancelMatchup : public Callback_IRoomService_cancelMatchup_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IRoomService_cancelMatchup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_cancelMatchup.
 */
template<class T> Callback_IRoomService_cancelMatchupPtr
newCallback_IRoomService_cancelMatchup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRoomService_cancelMatchup<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_cancelMatchup.
 */
template<class T> Callback_IRoomService_cancelMatchupPtr
newCallback_IRoomService_cancelMatchup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRoomService_cancelMatchup<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_cancelMatchup.
 */
template<class T> Callback_IRoomService_cancelMatchupPtr
newCallback_IRoomService_cancelMatchup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRoomService_cancelMatchup<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_cancelMatchup.
 */
template<class T> Callback_IRoomService_cancelMatchupPtr
newCallback_IRoomService_cancelMatchup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IRoomService_cancelMatchup<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::squarepro::room::IRoomService::begin_cancelMatchup.
 * Create a wrapper instance by calling ::squarepro::room::newCallback_IRoomService_cancelMatchup.
 */
template<class T, typename CT>
class Callback_IRoomService_cancelMatchup : public Callback_IRoomService_cancelMatchup_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IRoomService_cancelMatchup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_cancelMatchup.
 */
template<class T, typename CT> Callback_IRoomService_cancelMatchupPtr
newCallback_IRoomService_cancelMatchup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRoomService_cancelMatchup<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_cancelMatchup.
 */
template<class T, typename CT> Callback_IRoomService_cancelMatchupPtr
newCallback_IRoomService_cancelMatchup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRoomService_cancelMatchup<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_cancelMatchup.
 */
template<class T, typename CT> Callback_IRoomService_cancelMatchupPtr
newCallback_IRoomService_cancelMatchup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRoomService_cancelMatchup<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::squarepro::room::IRoomService::begin_cancelMatchup.
 */
template<class T, typename CT> Callback_IRoomService_cancelMatchupPtr
newCallback_IRoomService_cancelMatchup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IRoomService_cancelMatchup<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
