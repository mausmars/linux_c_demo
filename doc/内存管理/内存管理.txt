https://developer.aliyun.com/article/637620

线性区 虚拟内存
物理页面物理内存

内存的延迟分配
char *p=malloc(2048) //这里只是分配了虚拟内存2048，并不占用实际内存。
strcpy(p,”123”) //分配了物理页面，虽然只是使用了3个字节，但内存还是为它分配了2048字节的物理内存。
free(p) //通过虚拟地址，找到其所对应的物理页面，释放物理页面，释放线性区。

brk,sbrk,mmap,unmmap这几个系统调用

---------------------------------
glibc内存管理器

stack的内存地址是向下增长的，
heap的内存地址是向上增长的

128k的阀值，glibc可以设置

>128k mmap的方式向内核申请内存
mmap系统调用为其划分出另一块虚拟地址，供进程单独使用
unmmap系统调用将这块内存释放，这个过程中间不会产生内存碎块等问题

<128k brk
brk和sbrk系统调用，就是调整heap顶地址指针

一个场景，堆顶有一块正在使用的内存，而下面有很大的连续内存已经被释放掉了，那么这块内存也不能被释放。

chunk ------size
p------------ content
注：glibc在做内存申请时，最少分配16个字节，以便能够维护chunk结构

glibc提供的调试工具：
glibc 为用户提供了 malloc 等等函数的钩子（hook），如 __malloc_hook

-----------------------------------
代码占用的内存
数据部分占用内存，那么我们写的程序是不是也占用内存呢？
在linux中，程序的加载，涉及到两个工具，linker 和loader。
Linker主要涉及动态链接库的使用
loader主要涉及软件的加载。

链接动态库
一种是编译的时候，指明所依赖的动态链接库，这样loader可以在程序启动的时候，来所有的动态链接映射到内存中
运行过程中，通过dlopen和dlfree的方式加载动态链接库，动态将动态链接库加载到内存中

-----------------------------------
占用内存的测量
proc/meminfo 机器的内存使用信息
cat proc/meminfo

pid为进程号，显示当前进程所占用的虚拟地址
/proc/pid/maps
cat /proc/14761/maps

pid为进程号，进程所占用的内存
/proc/pid/statm
cat /proc/14761/statm

Size,Resident,Shared,Trs,Lrs,Drs,dt
3526 229 166 8 0 2123 0
参数 解释
Size (pages) 任务虚拟地址空间的大小 VmSize/4
Resident(pages) 应用程序正在使用的物理内存的大小 VmRSS/4
Shared(pages) 共享页数 0
Trs(pages) 程序所拥有的可执行虚拟内存的大小 VmExe/4
Lrs(pages) 被映像到任务的虚拟内存空间的库的大小 VmLib/4
Drs(pages) 程序数据段和用户态的栈的大小 （VmData+ VmStk ）4
dt(pages) 04

-----------------------------------
查看机器可用内存
free命令查看机器空闲内存时，会发现free的值很小。这主要是因为，在linux中有这么一种思想，内存不用白不用，因此它尽可能的cache和buffer一些数据，以方便下次使用
所以 空闲内存=free+buffers+cached=total-used

-----------------------------------


