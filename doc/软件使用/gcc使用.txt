gcc
---------------------------------------------
动态库链接时、执行时搜索路径顺序
1.编译目标代码时指定的动态库搜索路径；
2.环境变量LD_LIBRARY_PATH指定的动态库搜索路径；
3.配置文件/etc/ld.so.conf中指定的动态库搜索路径；
4.默认的动态搜索路径/lib;
5.默认的动态库搜索路径/usr/lib

---------------------------------------------
-L：指定链接时查找路径，多个路径用逗号分隔
-rpath：这种方式可以指定产生的目标程序的共享库查找路径。还有一个类似选项-rpath-link，与-rpath选项的区别在于，
-rpath选项指定的目录被硬编码到可执行文件中，
-rpath-link选项指定的目录只在链接阶段生效。这两个选项都是链接器ld的选项。更多链接器选项可以通过man ld查看。

-I(大写i)：指定头文件搜索路径。
-l(小写l)：指定链接某个库。指定链接的比如是libxxx.so.x.y.z的一个库，只需要写-lxxx即可，编译器根据当前环境，在相关路径中查找名为xxx的库。
xxx又称为共享库的链接名(link name)。不同的库可能具有同样的链接名，比如动态和静态版本，libxxx.a libxxx.so。
如果链接时采用-lxxx，那么链接器会根据输出文件的情况(动态/静态)选择合适的版本。比如如果ld采用了-static参数，就会使用静态版本，
如果使用了-Bdynamic(这也是默认情况)，就会使用动态版本。

-Dmacro 相当于 C 语言中的 #define macro
-Umacro 相当于 C 语言中的 #undef macro
-undef 取消对任何非标准宏的定义

--as-needed     就是忽略链接时没有用到的动态库
--no-as-needed  就是不忽略链接时没有用到的动态库

强制链接并依赖一个库
gcc ...... \
-Wl,--no-as-needed -ltsfreetype -Wl,--as-needed

# tsfreetype要能找到。
# 对于静态库：
# -Wl,--whole-archive -ltsfreetype -Wl,--no-whole-archive

readelf -a luna.so

